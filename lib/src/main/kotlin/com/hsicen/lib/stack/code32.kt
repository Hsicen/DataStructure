package com.hsicen.lib.stackimport kotlin.math.max/** * 作者：hsicen  8/19/21 16:02 * 邮箱：codinghuang@163.com * 作用： * 描述：最长有效括号 */private fun longestValidParentheses(s: String): Int {    fun calc(chars: CharArray, start: Int, flag: Int, end: Int, cTem: Char): Int {        var max = 0        var sum = 0        var currLen = 0        var validLen = 0        var pos = start        while (pos != end) {            sum += if (cTem == chars[pos]) 1 else -1            currLen++            if (sum < 0) {                max = if (max > validLen) max else validLen                sum = 0                currLen = 0            } else if (0 == sum) {                validLen = currLen            }            pos += flag        }        return if (max > validLen) max else validLen    }    val chars = s.toCharArray()    val len = chars.size    return max(        calc(chars, 0, 1, len, '('),        calc(chars, len - 1, -1, -1, ')')    )}fun main() {    println(longestValidParentheses("(()"))    println(longestValidParentheses(")()())"))    println(longestValidParentheses("()(()("))}