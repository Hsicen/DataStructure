package com.hsicen.letcode.searchimport kotlin.math.abs/** * 作者：hsicen  8/18/21 09:22 * 邮箱：codinghuang@163.com * 作用： * 描述：求一个数的平方根(取整) * Compute and return the square root of x, where x is guaranteed to be a non-negative integer. * Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned. */fun mySqrt(x: Int): Int {    if (0 >= x || 1 == x) return x    fun squar(x: Int, target: Int): Int {        val res = (x + target / x) shr 1        return if (res == x) x else squar(res, target)    }    return squar(x, x)}/** * 求一个数的平方根(保留整数) */private fun mySqrt2(item: Int): Int {    if (item <= 0) return -1    if (1 == item) return item    var low = 0    var high = item    var result = -1    while (low <= high) {        val mid = low + ((high - low) / 2)        if (mid <= item / mid) {            result = mid            low = mid + 1        } else {            high = mid - 1        }    }    return result}/** * 求一个数的平方根(保留整数) * 牛顿迭代法 */private fun mySqrt3(x: Float, count: Int): Float {    if (x <= 0) return 0f    if (x == 1f) return 1f    //精度    val e = 1 shr (if (count < 0) 0 else count)    var ret = x    var t = (ret + x / ret) / 2    while (abs(ret - t) > e) {        ret = t        t = (ret + x / ret) / 2    }    return ret}