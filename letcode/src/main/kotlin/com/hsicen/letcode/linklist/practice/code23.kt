package com.hsicen.letcode.linklist.practice/** * 作者：hsicen  8/10/21 09:17 * 邮箱：codinghuang@163.com * 作用： * 描述：合并K个有序链表 */fun mergeKLists(lists: Array<ListNode?>): ListNode? {    if (lists.isNullOrEmpty()) return null    return merge(lists, 0, lists.size - 1)}fun merge(lists: Array<ListNode?>, left: Int, right: Int): ListNode? {    if (left == right) return lists[left]    val mid = left + (right - left).shr(1)    val l1 = merge(lists, left, mid)    val l2 = merge(lists, mid + 1, right)    return mergeTwoList(l1, l2)}fun mergeTwoList(nodeA: ListNode?, nodeB: ListNode?): ListNode? {    return when {        null == nodeA -> nodeB        null == nodeB -> nodeA        else -> {            var headA = nodeA            var headB = nodeB            val guardHead = ListNode(-1)            var cur: ListNode? = guardHead            while (null != headA && null != headB) {                if (headA.`val` <= headB.`val`) {                    cur?.next = headA                    headA = headA.next                } else {                    cur?.next = headB                    headB = headB.next                }                cur = cur?.next            }            cur?.next = headA ?: headB            guardHead.next        }    }}fun addNodeEnd(newHead: ListNode, data: Int) {    val newNode = ListNode(data)    var pre: ListNode? = newHead    while (null != pre?.next) {        pre = pre.next    }    pre?.next = newNode}fun main() {    val list1 = ListNode(1)    addNodeEnd(list1, 4)    addNodeEnd(list1, 5)    val list2 = ListNode(1)    addNodeEnd(list2, 3)    addNodeEnd(list2, 4)    val list3 = ListNode(2)    addNodeEnd(list3, 6)    val lists = arrayOf<ListNode?>(list1, list2, list3)    val mergedList = mergeKLists(lists)    println(mergedList.toString())}