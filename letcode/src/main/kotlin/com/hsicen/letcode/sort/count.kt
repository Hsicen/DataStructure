package com.hsicen.letcode.sort

/**
 * 作者：hsicen  5/21/21 09:29
 * 邮箱：codinghuang@163.com
 * 功能：
 * 描述：计数排序(计数范围<数据个数)
 *  稳定排序：是
 *  原地排序：否，会额外占用空间
 *
 *  时间复杂度：O(n)
 *  空间复杂度：O(n)
 *
 * 核心思想：
 *  计数排序其实是桶排序的一种特殊情况。当要排序的 n 个数据，所处的范围并不大的时候，比如最大值是 k，我们就可以把数据划分成 k 个桶。
 *  每个桶内的数据值都是相同的，省掉了桶内排序的时间
 *
 * 总结：
 *  计数排序只能用在数据范围不大的场景中，如果数据范围 k 比要排序的数据 n 大很多，就不适合用计数排序了。
 *  而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数
 *
 * 实例：数组A[8]={2,5,3,0,2,3,0,3}
 *  原数组A[8],桶数组C[6],有序数组R[8]; 由于数组A的最大值为5，最小值为0,故数组C的大小为6，
 *  先统计计数个数C[6]={2,0,2,3,0,1},然后对数组C进行顺序求个C[6]={2,2,4,7,7,8};
 *  从后到前遍历数组A：
 *    A[7]=3,而C[3]=7,得到A[7]在数组R的位置为7,下标为6,故R[6]=3,然后C[3]=6,C[6]={2,2,4,6,7,8}
 *    A[6]=0,而C[0]=2,得到A[6]在数组R的位置为2,下标为1,故R[1]=0,然后C[0]=1,C[6]={1,2,4,6,7,8}
 *    A[5]=3,而C[3]=6,得到A[5]在数组R的位置为6,下标为5,故R[5]=3,然后C[3]=5,C[6]={1,2,4,5,7,8}
 *    A[4]=2,而C[2]=4,得到A[4]在数组R的位置为4,下标为3,故R[3]=2,然后C[2]=3,C[6]={1,2,3,5,7,8}
 *    A[3]=0,而C[0]=1,得到A[3]在数组R的位置为1,下标为0,故R[0]=0,然后C[0]=0,C[6]={0,2,3,5,7,8}
 *    A[2]=3,而C[3]=5,得到A[2]在数组R的位置为5,下标为4,故R[4]=3,然后C[3]=4,C[6]={0,2,3,4,7,8}
 *    A[1]=5,而C[5]=8,得到A[1]在数组R的位置为8,下标为7,故R[7]=5,然后C[5]=7,C[6]={0,2,3,4,7,7}
 *    A[0]=2,而C[2]=3,得到A[0]在数组R的位置为3,下标为2,故R[2]=2,然后C[2]=2,C[6]={0,2,2,4,7,7}
 */