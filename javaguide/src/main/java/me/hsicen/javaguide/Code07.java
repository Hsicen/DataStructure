package me.hsicen.javaguide;

/******====== 字符 ======******/

/**
 * ## 字符
 * <p>
 * > **字符（Character）**可以理解为书面表达中所可能用到的符号，包括各种文字、数字、标点、图形符号、控制符号（如回车换行等）等。
 * >
 * > **字符集（Character Set）**是一组字符的集合，不同语言会有不同的字符集，比如，GB2312就是中文字符集；字符集不仅包含字符，还包含每个字符的编号。
 * >
 * > **字符编码（Character Encoding）**是指计算机存储字符编号的格式，大部分情况下，在设计字符集时，会同步设计字符编码，一个字符集会对应一种字符编码；不过，也有例外，同一个字符集也可以对应多种不同的字符编码，比如，Unicode字符集对应UTF-8、UTF-16、UTF-32三种不同的字符编码。
 * <p>
 * ### 字符集和字符编码
 * <p>
 * > 比较常用的字符集有ASCII、GB2312、GBK、GB18030、Unicode。其中，前三个的字符集跟字符编码同名，也即是字符集和字符编码是一一对应的。Unicode字符集对应的字符编码有三种，分别是UTF-8、UTF-16、UTF-32。
 * <p>
 * #### **ASCII字符集和字符编码**
 * <p>
 * > ASCII 符集和字符编码是美国人设计的，主要包含了英文系统的计算机所用到的字符，使用 1个 字节存储字符，包含 128 个字符，ASCII 字符编码很简单，使用1个字节中的低 7 位来存储编号，最高位默认为 0：
 * > <img src="../Image/java04.png" alt="7-3.png" style="zoom: 50%;" />
 * >
 * > ASCII 字符集中的字符分为两类：不可显示字符和可显示字符，编号 0~31 和 127 对应的字符为不可显示字符，编号 32~126 对应的字符为可显示字符；不可显示字符也叫做控制字符，当在一个字符串中包含一些控制字符时，控制字符并不会显示在计算机屏幕上，而是控制输出格式。
 * >
 * > 我们可以使用 `\xxx` 的格式来表示非可显示字符，其中，xxx 为非可显示字符的 ASCII 码的八进制表示；当然，对于可显示字符，我们也可以用这种方式来表示：
 * >
 * > ```java
 * > char c1 = 'a';
 * > char c2 = '\141';
 * > char c3 = '\012';
 * > ```
 * >
 * > 实际上，对于部分常用的非可显示字符，我们还可以使用转义字符来表示；比如 \r 表示回车，\n 表示换行，\t 表示 tab，\0 表示null：
 * >
 * > ```java
 * > char invisibleC4 = '\n';
 * > System.out.println("abc\ndef");
 * > ```
 * >
 * > 当然，我们也可以直接将 ASCII 码值来表示字符:
 * >
 * > ```java
 * > char ch = 97;
 * > System.out.println(ch); // 打印 a
 * > ```
 * <p>
 * #### GB*系列字符集和字符编码
 * <p>
 * > ASCII 只能表示 128 个字符，对于英文来说可能足够了，但是，对于中文、日文、韩文等，所包含的字符远远不止这些；所以，当计算机传到世界各地之后，为了适应各地的语言，又相继发布了其他字符集和字符编码；支持中文的字符集和字符编码，大都以 GB 开头来命名，比如常见的有 GB2312、GBK、GB18030。
 * >
 * > GB2312 发布于 1980 年，是第一个中文字符集和字符编码的；它采用定长存储方式，使用 2个 字节来存储字符，但因为其特殊的编码方式只存储 7000 多个字符。
 * >
 * > GBK 仍然使用 2个 字节来存储字符，但因为其使用新的编码方式，能表示的字符增多，比 GB2132 增加了 2万 多个汉字和符号。
 * >
 * > GB18030 兼容 GB2132 和 GBK，并且可表示的字符更多，共收录了 7万 多个汉字；GB18030 采用变长编码方式，不同的字符使用不同长度的字节（1字节、2字节或4字节）来存储，存储的字节长度是不同的。
 * <p>
 * #### Unicode字符集和UTF*系列字符编码
 * <p>
 * > 各个语言都有自己的字符集和字符编码，同一串二进制位在不同的字符集和字符编码中，代表不同的字符，这就导致我们无法在一个文档中使用两种不同的语言（不同的字符集和字符编码）。
 * >
 * > 为了大一统，Unicode 字符集就出现了；Unicode 字符集包含大约 100万 个字符，涵盖了世界上所有语言的所有字符，每一个字符都对应一个不同的编号；使用 Unicode 字符集，我们就能在同一个文档里使用不同语言的字符了；我们一般习惯将字符编号表示为十六进制，并且辅以前缀 "U+"，以表示此编号为 Unicode 字符编号。
 * >
 * > 尽管 Unicode 字符集中的字符个数超百万，但常用的并不多，为了让常用字符的编号尽可能小，Unicode 字符集将编号分为两部分：
 * >
 * > - 编号从 `U+0 ~ U+FFFF`，并且排除 `U+D800 ~ U+DFFF`，分配给使用频率最高的字符，这几乎涵盖了各个语言中的常用字符
 * > - 编号从 `U+10000 ~ U+10FFFF`，大约有 100多万 个编号，分配给剩下的所有字符
 * >
 * > Unicode 只是一个字符集，包含字符及其编号，但并不包含字符编号在计算机中的存储方式，也就是字符编码；Unicode 字符集对应 3 种字符编码：UTF-32、UTF-16、UTF-8
 * <p>
 * ##### UTF-32
 * <p>
 * > UTF-32 是定长编码，使用 **4个** 字节来存储 Unicode 编号(一个字符)；定长的好处就是编码简单，只需要将字符编号直接存入计算机即可；读取时解码也非常简单，每读取 4个 字节解码为一个字符。
 * <p>
 * ##### UTF-16
 * <p>
 * > UTF-16 采用变长编码，`U+0 ~ U+FFFF` 范围（不包含U+D800 ~ U+DFFF）内的编号使用 2个 字节存储字符(编码)；`U+10000 ~ U+10FFFF` 之间的编号采用 4个 字节存储字符(编码)。
 * >
 * > 采用变长编码方式，比起定长的 UTF-32 编码方式，更加节省存储空间；但是，编解码也复杂了很多。当从一个文本中读取 2个 字节之后，我们怎么知道这 2个 字节对应的数值，是 `U+0 ~ U+FFFF` 范围的 2个 字节编码，还是`U+10000 ~ U+10FFFF` 范围内的 4个 字节编码的高十六位或低十六位呢？
 * >
 * > 为了解决这个问题，UTF-16 将 `U+0 ~ U+FFFF`之间的 Unicode 编号，直接存储在 2个 字节中，而对于 `U+10000 ~ U+10FFFF` 之间的 Unicode 编号，采用如下特殊编码方式:
 * >
 * > - 将 `U+10000 ~ U+10FFFF` 范围内的 Unicode 编号减去 10000，得到新的范围：`U+00000 ~ U+FFFFF`，新的范围内的每个编号，只使用 20个 二进制位就能表示
 * > - 将 20个 二进制位中的 高10位 取出，放到 UTF-16 的 4字节 编码中的 高16位 中，前面多出的 6位 用 110110 补全，这样 高16位 的数据范围就变成了 `U+D800 ~ U+DBFF`
 * > - 将 20个 二进制位中的 低10位 取出，放到 UTF-16 的 4字节 编码中的 低16位 中，前面多出的 6位 用 110111 补全，这样 低16位 的数据范围就变成了 `U+DC00 ~ U+DFFF`
 * >
 * > 上述处理过程如下示例所示:
 * > <img src="../Image/java05.png" alt="7-1.png" style="zoom:50%;" />
 * >
 * > 因为 UTF-16 最小的编码长度是 2个字节，所以，在将二进制编码解码为字符时，我们会每次从文本中读取两个字节来分析：
 * >
 * > - 如果这 2个字节 的数值落在 `U+D800 ~ U+DBFF` 范围内（也就是前缀为 110110），那么读出的这 2个字节 就是 4字节 编码的 高16位
 * > - 如果这 2个字节 的数值落在 `U+DC00 ~ U+DFFF` 范围内（也就是前缀为 110111），那么读出的这 2个字节 就是 4字节 编码的 低16位
 * > - 如果数值不在 `U+D800 ~ U+DFFF` 范围内（U+D800~U+DBFF 和 U+DC00~U+DFFF），那么读出的这 2个字节 就是 2字节 编码
 * >
 * > 在 Unicode 字符集中，在 `U+0 ~ U+FFFF`这个范围内，`U+D800 ~ U+DFFF`这个范围的编号并没有使用，没有对应的字符，原因就是 2字节 编码跟 4字节 编码的 高16位 和 低16位 数据做区分。
 * <p>
 * ##### UTF-8
 * <p>
 * > UTF-8 对字符编号占用存储空间的大小，控制得更加精细，编码也更加复杂，它同样使用变长编码，包括 4种 类型的编码：1字节编码、2字节编码、3字节编码、4字节编码，不同范围内的编号使用不同的编码：
 * >
 * > - U+0000 ~ U+007F 范围内的编号使用 1字节 编码
 * > - U+0080 ~ U+07FF 范围内的编号使用 2字节 编码
 * > - U+0800 ~ U+FFFF 范围内的编号使用 3字节 编码
 * > - U+10000 ~ U+10FFFF 范围内的编号使用 4字节 编码
 * >
 * > 具体的编码规则如下所示：
 * > | 编码      | 范围         | 第1个字节 | 第2个字节 | 第3个字节 | 第4个字节 |
 * > | --------- | ------------ | --------- | --------- | --------- | --------- |
 * > | 1字节编码 | 0000~007F    | 0xxxxxxx  |           |           |           |
 * > | 2字节编码 | 0080~07FF    | 110xxxxx  | 10xxxxxx  |           |           |
 * > | 3字节编码 | 0800~FFFF    | 1110xxxx  | 10xxxxxx  | 10xxxxxx  |           |
 * > | 4字节编码 | 10000~10FFFF | 11110xxx  | 10xxxxxx  | 10xxxxxx  | 10xxxxxx  |
 * >
 * > 上图中的 xxxx 如何替换为具体的 Unicode 编号？举例在 U+0080~U+07FF 范围内的编号，最多只需要 11位 二进制位来表示，我们将 11位 二进制位的 前5位 放入2字节编码的第一个字节的 xxxxx 中，把 后6位 放入第二个字节的 xxxxxx 中：
 * > <img src="../Image/java06.png" alt="7-2.png" style="zoom: 50%;" />
 * >
 * > 跟 UTF-16 编码类似，UTF-8 这样编码的目的是，明确读取出来的字节，属于哪种类型的编码（1字节编码、2字节编码...）；因为UTF-8 的最短编码长度是 1字节，在读取二进制文件进行解码时，我们每次读取一个字节，判定是哪种类型的首字节编码；假如是 3字节 编码的首字节编码，那么我们再顺序往下读取2个尾随字节。
 * >
 * > 如果在开发中，存储英文字符居多，使用 UTF-8 更加节省空间，因为为了兼容 ASCII 码，Unicode 中编号 0~127 之间的字符跟 ASCII码 一一对应，英文字符的 Unicode 编号在 0~127 之间，使用 UTF-8 编码只需要 1个字节 长度，而使用 UTF-16 编码则需要 2个节 长度；如果存储非英文字符居多，那么使用 UTF-16 反倒会更加节省空间，因为常用的非英文字符，在 UTF-16 中编码长度为 2字节，而在 UTF-8 中编码长度为 2字节 或 3字节，并且 3字节 居多。
 * <p>
 * ### Char
 * <p>
 * > 因为 C语言 出现的较早，彼时多数计算机还只支持英文系统，而 C++ 又继承了 C语言 的特性，所以 C/C++ 中的 char 类型占用一个字节长度，只能存储 ASCII 字符，完全满足英文系统的编程开发；随着计算机到世界各地，C/C++ 选择使用 char数组 来存储非ASCII 字符，比如中文。
 * >
 * > Java 出现较晚，此时 Unicode 已经流行，为了让 char 类型表示更多的字符，Java 设计了 2个 字节长的 char 类型，存储部分 Unicode 字符(U+0 ~ U+FFFF)，Unicode 字符会通过 UTF-16 编码之后存储到 char 类型变量中。
 * >
 * > Java 中的 char 类型只占 2个字节 长度，所以不能存储所有的 UTF-16 编码，不能表示所有的 Unicode 字符；不过平时经常用到的字符，一般都是 Unicode 编号处于 `U+0 ~ U+FFFF` 之间的字符；为了避免存储空间的浪费，Java 让 char 类型占 2个字节 长度，只表示 Unicode 编号处于 `U+0 ~ U+FFFF` 之间的字符；跟 ASCII码 类似，我们也有 3种 方法将 Unicode 字符赋值给 char 类型变量：
 * >
 * > - 对于可显示字符，我们可以直接使用字符
 * > - 对于所有字符(可显示或不可显示)，我们都可以将字符对应的 UTF-16 编码表示为 `\uxxxx` 的形式赋值给变量，其中 xxxx 为 16 进制
 * > - 对于所有字符，我们都可以将字符对应的 Unicode编号 赋值给变量
 * >
 * > ```java
 * > char a = '我'; // 字符本身
 * > char c7 = '\u6211'; // UTF-16 编码
 * > char c8 = 0x6211; // Unicode 编号
 * > ```
 * >
 * > 类似 C/C++ 存储 ASCII码 之外字符的做法，Java 使用 char 数组来存储 `U+10000 ~ U+10FFFFF` 之间的字符:
 * >
 * > ```java
 * > // 🜁 这个字符的 Unicode 编号为 U+1F701，UTF-16 编码为：D83D DF01
 * > char[] chs = new char[2];
 * > chs[0] = '\uD83D';
 * > chs[1] = '\uDF01';
 * > System.out.println(chs); //🜁
 * >
 * > String s = "\uD83D\uDF01";
 * > System.out.println(s); //🜁
 * >
 * > char[] chs2 = Character.toChars(0x1F701);
 * > System.out.println(chs2); //🜁
 * > ```
 */
class Code07 {
  public static void main(String[] args) {
    char c1 = 'a';
    char c2 = '\141';
    char c3 = '\012';

    String c4 = "abc\012def";

    char c5 = 35297;

    char c6 = '我';
    char c7 = '\u6211';
    char c8 = 0x6211;

    System.out.println(c1);
    System.out.println(c2);
    System.out.println(c3);
    System.out.println(c4);

    System.out.println(c5);
  }
}